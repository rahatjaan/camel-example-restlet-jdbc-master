<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jdbc="http://www.springframework.org/schema/jdbc"

	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
       http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd">

	<bean id="executor" class="java.util.concurrent.Executors"
		factory-method="newFixedThreadPool">
		<constructor-arg index="0" value="16" />
	</bean>

	<import resource="common.xml" />
	<import resource="database.xml" />
	<bean id="jms" class="org.apache.camel.component.jms.JmsComponent">
		<property name="connectionFactory">
			<bean class="org.apache.activemq.ActiveMQConnectionFactory">
				<property name="brokerURL" value="vm://localhost" />
			</bean>
		</property>
	</bean>


	<!-- <bean id="myProcessor" class="ige.integration.processes.IntegrationProcessor" /> -->
	<bean id="jmsProcessor" class="ige.integration.processes.JMSProcessor" />
	<bean id="restProcessor" class="ige.integration.processes.RestProcessor" />
	<bean id="responseProcessor" class="ige.integration.processes.ResponseProcessor" />
	

	<!-- <sslContextParameters id="sslContextParameters"> <trustManagers> <keyStore 
		resource="/users/home/server/truststore.jks" password="keystorePassword"/> 
		</trustManagers> </sslContextParameters> -->

	<camelContext xmlns="http://camel.apache.org/schema/spring">
		<propertyPlaceholder id="placeholder" location="classpath:sql.properties" />
		<dataFormats>
			<xmljson id="xmljson" />
			<xmljson id="xmljsonWithOptions" forceTopLevelObject="true"
				trimSpaces="true" rootName="newRoot" skipNamespaces="true"
				removeNamespacePrefixes="true" expandableProperties="d e" />
		</dataFormats>
		<!-- <route id="createOrder">
			<from uri="restlet:/createOrder?restletMethod=POST" />
			<transform>
				<method method="newData(${header[id]})" ref="dataBean">
				</method>
			</transform>
			<pipeline>
				<to uri="sql:{{sql.selectData}}" />
				<to uri="bean:dataBean?method=processOrder" />
				<filter>
					<method method="checkOrder" ref="dataBean">
					</method>
					<to uri="bean:myProcessor" />
					<choice>
						<when>
							<xpath>/dataBean/id = 1</xpath>
							<to uri="jms:orders" />
						</when>
						<when>
							<xpath>/dataBean/id = 2</xpath>
							<to uri="restlet:/postOrder?restletMethod=GET" />
						</when>
						<otherwise>
							<to
								uri="smtp://smtp.gmail.com:587?username=username@gmail.com&amp;password=password&amp;from=from@gmail.com&amp;to=to@gmail.com&amp;subject=Spring DSL&amp;mail.smtp.starttls.enable=true" />
							<to uri="file://C://" />
						</otherwise>
					</choice>
				</filter>
			</pipeline>
		</route> -->

		<route id="restProcessorOrder">
			<from uri="restlet:/postOrder?restletMethod=GET" />
			<to uri="bean:restProcessor" />
		</route>

		<route id="placeInRoomDiningOrder">
			<from uri="restlet:/placeOrder?restletMethod=POST" />
			<unmarshal ref="xmljsonWithOptions" />
			<to uri="bean:integrationProcessor" />
			<choice>
						<when>
<!-- 							<xpath>/tenantInfo/outboundType = 1</xpath> -->
								<simple>${in.body.tenant.outboundType} == '1'</simple>
										
										<setHeader headerName="CamelHttpMethod"> 
		                                		<constant>POST</constant> 
				                        </setHeader> 
				                        <setHeader headerName="Content-Type"> 
				                                <constant>application/x-www-form-urlencoded</constant> 
				                        </setHeader> 
				                        
		                                <setBody> 
		                                        <simple>BODY=${in.body}&amp;HEADER=${in.headers}</simple> 
		                             	</setBody> 
		                             	
							<to uri="http://localhost:8080/RestfullConsumer/InRoomDinning" />
						</when>
						<when>
<!-- 							<xpath>/tenantInfo/outboundType = 2</xpath> -->
							<simple>${in.body.tenant.outboundType} == '2'</simple>
							<to uri="jms:orders" />
<!-- 							<to uri="bean:responseProcessor" /> -->
						</when>
						<when>
<!-- 							<xpath>/tenantInfo/outboundType = 3</xpath> -->
							<simple>${in.body.tenant.outboundType} == '3'</simple>
							<to	uri="smtp://smtp.gmail.com:587?username=username@gmail.com&amp;password=password&amp;from=from@gmail.com&amp;to=to@gmail.com&amp;subject=Spring DSL&amp;mail.smtp.starttls.enable=true" />
							<to uri="bean:responseProcessor" />
						</when>
						<otherwise>
							<to uri="file://C://" /> 
							<to uri="bean:responseProcessor" />
						</otherwise>
					</choice>
					
		</route>
		
		<route id="jmsProcessorOrder">
			<from uri="jms:orders" />
			<to uri="bean:jmsProcessor" />
		</route>
		
		
	</camelContext>
</beans>